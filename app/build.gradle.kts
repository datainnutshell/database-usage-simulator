import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer
import cz.alenkacz.gradle.scalafmt.ScalafmtTask
import org.scalafmt.interfaces.Scalafmt

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Scala application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.2.1/userguide/building_java_projects.html in the Gradle documentation.
 */

val scalaMajorVersion = "2.13"
val scalaVersion = "2.13.11"

plugins {
    // Apply the scala Plugin to add support for Scala.
    scala

    // Apply the application plugin to add support for building a CLI application in Java.
    application

    // ShadowJar
    id("com.github.johnrengelman.shadow") version "8.1.1"

    // Scalafmt
    id("cz.alenkacz.gradle.scalafmt") version "1.16.2"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use Scala 2.13 in our library project
    implementation("org.scala-lang:scala-library:${scalaVersion}")

    // This dependency is used by the application.
    implementation("com.google.guava:guava:31.1-jre")

    implementation("com.typesafe.akka:akka-actor_${scalaMajorVersion}:2.6.16")
    implementation("com.typesafe.akka:akka-slf4j_${scalaMajorVersion}:2.6.16")
    implementation("com.typesafe.akka:akka-stream_${scalaMajorVersion}:2.6.16")
    implementation("com.typesafe.akka:akka-http_${scalaMajorVersion}:10.2.6")
    implementation("com.typesafe.slick:slick_${scalaMajorVersion}:3.4.1")
    implementation("mysql:mysql-connector-java:8.0.33")
    implementation("com.mysql:mysql-connector-j:8.0.33")

    implementation("ch.qos.logback:logback-classic:1.2.12")

    // Use Scalatest for testing our library
    testImplementation("junit:junit:4.13.2")
    testImplementation("org.scalatest:scalatest_${scalaMajorVersion}:3.2.15")
    testImplementation("org.scalatestplus:junit-4-13_${scalaMajorVersion}:3.2.2.0")

    // Need scala-xml at test runtime
    testRuntimeOnly("org.scala-lang.modules:scala-xml_${scalaMajorVersion}:1.2.0")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

application {
    // Define the main class for the application.
    mainClass.set("org.datainnutshell.App")
}

scalafmt {
    configFilePath = ".scalafmt.conf"
}

tasks.withType<ShadowJar> {
    val newTransformer = AppendingTransformer()
    newTransformer.resource = "reference.conf"
    transformers.add(newTransformer)
}
